/* CSS TUTORIAL */

/* CSS Selectors */
/* 
  Simple selectors - (select elements based on name, id, class)
  Combinator selectors - (select elements based on a specific relationship between them)
  Pseudo-class selectors - (select elements based on a certain state)
  Pseudo-elements selectors - (select and style a part of an element)
  Attribute selectors - (select elements based on an attribute or attribute value)
*/
/* The CSS element Selector */
p {
  text-align: center;
  color: red;
}
/* The CSS id Selector */
#para1 {
  text-align: center;
  color: red;
}
/* The CSS class Selector */
.center {
  text-align: center;
  color: red;
}
p.center {
  text-align: center;
  color: red;
}
/* The CSS Universal Selector */
* {
  text-align: center;
  color: blue;
}
/* The CSS Grouping Selector */
h1,
h2,
p {
  text-align: center;
  color: red;
}

/* How To Add CSS */
/* Multiple Style Sheets */
/* If some properties have been defined for the same selector (element) in different style sheets, the value from the last read style sheet will be used. */
/* Cascading Order */
/* 
  1. Inline style (inside an HTML element)
  2. External and internal style sheets (in the head section)
  3. Browser default
*/

/* CSS Backgrounds */
/* CSS Backgrounds - Background Color */
/* Transparency using RGBA */
div {
  background: rgba(0, 128, 0, 0.3); /* Green background with 30% opacity */
}

/* CSS Backgrounds - Background Repeat */
/* repeat-x, repeat-y */

/* CSS Backgrounds - Background Attachment */
/* background-attachment: fixed / scroll */

/* CSS Backgrounds - Background Shorthand */
/* 
  background-color
  background-image
  background-repeat
  background-attachment
  background-position
*/
/* 
  background-clip -	Specifies the painting area of the background
  background-origin -	Specifies where the background image(s) is/are positioned
  background-size -	Specifies the size of the background image(s)
*/

/* CSS Borders */
/* CSS Borders - CSS Borders */
/* The border-style property can have from one to four values (for the top border, right border, bottom border, and the left border). */
p.mix {
  border-style: dotted dashed solid double;
}

/* CSS Margins - CSS Margin Collapse */
/* Top and bottom margins of elements are sometimes collapsed into a single margin that is equal to the largest of the two margins. This does not happen on left and right margins! Only top and bottom margins! */
h1 {
  margin: 0 0 50px 0;
}

h2 {
  margin: 20px 0 0 0;
}

/* CSS Height and Width */
/* Note: Remember that the height and width properties do not include padding, borders, or margins! They set the height/width of the area inside the padding, border, and margin of the element! */
/* Note: If you for some reason use both the width property and the max-width property on the same element, and the value of the width property is larger than the max-width property; the max-width property will be used (and the width property will be ignored). */

/* CSS Box Model */
/* Important: When you set the width and height properties of an element with CSS, you just set the width and height of the content area. To calculate the full size of an element, you must also add padding, borders and margins. */

/* CSS Outline */
/* CSS Outline - CSS Outline */
/* An outline is a line that is drawn around elements, OUTSIDE the borders, to make the element "stand out". */
/* Note: Outline differs from borders! Unlike border, the outline is drawn outside the element's border, and may overlap other content. Also, the outline is NOT a part of the element's dimensions; the element's total width and height is not affected by the width of the outline. */

/* CSS Outline - CSS Outline Color */
/* invert */
p.ex1 {
  border: 1px solid yellow;
  outline-style: solid;
  outline-color: invert;
}

/* CSS Outline - CSS Outline Offset */
/* The outline-offset property adds space between an outline and the edge/border of an element. The space between an element and its outline is transparent. */

/* CSS Text */
/* CSS Text - CSS Text */
/* Note: For W3C compliant CSS: If you define the color property, you must also define the background-color. */

/* CSS Text - CSS Text Alignment */
/* Text Alignment */
div {
  text-align: justify;
}
/* Text Direction */
p {
  direction: rtl;
  unicode-bidi: bidi-override;
}
/* Vertical Alignment */
img.a {
  vertical-align: baseline;
}
img.b {
  vertical-align: text-top;
}
img.c {
  vertical-align: text-bottom;
}
img.d {
  vertical-align: sub;
}
img.e {
  vertical-align: super;
}

/* CSS Text - CSS Text Decoration */
h1 {
  text-decoration: overline;
}
h2 {
  text-decoration: line-through;
}
h3 {
  text-decoration: underline;
}

/* CSS Text - CSS Text Transformation */
p.uppercase {
  text-transform: uppercase;
}
p.lowercase {
  text-transform: lowercase;
}
p.capitalize {
  text-transform: capitalize;
}

/* CSS Text - CSS Text Spacing */
/* Text Indentation */
p {
  text-indent: 50px;
}
/* Letter Spacing */
h1 {
  letter-spacing: 3px;
}
/* Line Height */
p.small {
  line-height: 0.8;
}
/* Word Spacing */
h1 {
  word-spacing: 10px;
}
/* White Space */
p {
  white-space: nowrap;
}

/* CSS Text - CSS Text Shadow */
h1 {
  text-shadow: 2px 2px 5px red;
}
/* text-overflow - Specifies how overflowed content that is not displayed should be signaled to the user */

/* CSS Fonts */
/* CSS Fonts - CSS Font Style */
/* Font Variant */
p.normal {
  font-variant: normal;
}
p.small {
  font-variant: small-caps;
}

/* CSS Fonts - CSS Google Fonts */
/* Use Multiple Google Fonts */
/* <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Audiowide|Sofia|Trirong"> */
/* Enabling Font Effects */
/* 
  <head>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Sofia&effect=fire">
    <style>
      body {
        font-family: "Sofia", sans-serif;
        font-size: 30px;
      }
    </style>
  </head>
  <body>
    <h1 class="font-effect-fire">Sofia on Fire</h1>
  </body>
*/
/* 
  <head>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Sofia&effect=neon|outline|emboss|shadow-multiple">
    <style>
      body {
        font-family: "Sofia", sans-serif;
        font-size: 30px;
      }
    </style>
  </head>
  <body>
    <h1 class="font-effect-neon">Neon Effect</h1>
    <h1 class="font-effect-outline">Outline Effect</h1>
    <h1 class="font-effect-emboss">Emboss Effect</h1>
    <h1 class="font-effect-shadow-multiple">Multiple Shadow Effect</h1>
  </body>
*/

/* CSS Fonts - CSS Great Font Pairings */
/* Font Pairing Rules */
/* 
  1. Compliment
  2. Use Font Superfamilies
  3. Contrast is King
  4. Choose Only One Boss
*/

/* CSS Fonts - CSS Font Property */
/* font */
/*  
  font-style
  font-variant
  font-weight
  font-size/line-height
  font-family
*/
/* Note: The font-size and font-family values are required. If one of the other values is missing, their default value are used. */

/* CSS Links */
/* 
  When setting the style for several link states, there are some order rules:
    a:hover MUST come after a:link and a:visited
    a:active MUST come after a:hover 
*/
/* 
  cursor:
    <span style="cursor: auto">auto</span><br>
    <span style="cursor: crosshair">crosshair</span><br>
    <span style="cursor: default">default</span><br>
    <span style="cursor: e-resize">e-resize</span><br>
    <span style="cursor: help">help</span><br>
    <span style="cursor: move">move</span><br>
    <span style="cursor: n-resize">n-resize</span><br>
    <span style="cursor: ne-resize">ne-resize</span><br>
    <span style="cursor: nw-resize">nw-resize</span><br>
    <span style="cursor: pointer">pointer</span><br>
    <span style="cursor: progress">progress</span><br>
    <span style="cursor: s-resize">s-resize</span><br>
    <span style="cursor: se-resize">se-resize</span><br>
    <span style="cursor: sw-resize">sw-resize</span><br>
    <span style="cursor: text">text</span><br>
    <span style="cursor: w-resize">w-resize</span><br>
    <span style="cursor: wait">wait</span>
*/

/* CSS Lists */
/* An Image as The List Item Marker */
ul {
  list-style-image: url("sqpurple.gif");
}
/* Position The List Item Markers */
ul.a {
  list-style-position: outside;
}
ul.b {
  list-style-position: inside;
}
/* list-style */
/*  
  list-style-type - (if a list-style-image is specified, the value of this property will be displayed if the image for some reason cannot be displayed)
  list-style-position - (specifies whether the list-item markers should appear inside or outside the content flow)
  list-style-image - (specifies an image as the list item marker)
*/

/* CSS Tables */
/* CSS Tables - CSS Tables */
/* Collapse Table Borders */
table {
  border-collapse: collapse;
}

/* CSS Tables - CSS Table Alignment */
/* Vertical Alignment */
td {
  height: 50px;
  vertical-align: bottom;
}

/* CSS Tables - CSS Responsive Table */
/* Add a container element (like <div>) with overflow-x:auto around the <table> element to make it responsive: */
/*  
<div style="overflow-x:auto;">
  <table>
  ... table content ...
  </table>
</div>
*/
/* 
  border-spacing - Specifies the distance between the borders of adjacent cells
  caption-side - Specifies the placement of a table caption
  empty-cells	- Specifies whether or not to display borders and background on empty cells in a table
  table-layout - Sets the layout algorithm to be used for a table
*/

/* CSS Layout - The display Property */
/* Note: Setting the display property of an element only changes how the element is displayed, NOT what kind of element it is. So, an inline element with display: block; is not allowed to have other block elements inside it. */

/* CSS Layout - The position Property */
/* The position Property */
/*  
  static
  relative
  fixed
  absolute
  sticky
*/
/* Overlapping Elements */
/* Note: If two positioned elements overlap without a z-index specified, the element positioned last in the HTML code will be shown on top. */
/* clip	- Clips an absolutely positioned element */

/* CSS Layout - Overflow */
/*  
  visible - Default. The overflow is not clipped. The content renders outside the element's box
  hidden - The overflow is clipped, and the rest of the content will be invisible
  scroll - The overflow is clipped, and a scrollbar is added to see the rest of the content
  auto - Similar to scroll, but it adds scrollbars only when necessary
*/
/* Note: The overflow property only works for block elements with a specified height. */
/*  
  overflow-x	Specifies what to do with the left/right edges of the content if it overflows the element's content area
  overflow-y	Specifies what to do with the top/bottom edges of the content if it overflows the element's content area
*/

/* CSS Layout - display: inline-block */
/*  
  Compared to display: inline, the major difference is that display: inline-block allows to set a width and height on the element.
  Also, with display: inline-block, the top and bottom margins/paddings are respected, but with display: inline they are not.
  Compared to display: block, the major difference is that display: inline-block does not add a line-break after the element, so the element can sit next to other elements.
*/

/* CSS Combinators */
/*  
  element element	- div p -	Selects all <p> elements inside <div> elements
  element>element	- div > p -	Selects all <p> elements where the parent is a <div> element
  element+element	- div + p -	Selects the first <p> element that are placed immediately after <div> elements
  element1~element2	- p ~ ul - Selects every <ul> element that are preceded by a <p> element

*/

/* CSS Pseudo-classes */
/* 
  selector:pseudo-class {
    property: value;
  }
*/
/* Note: a:hover MUST come after a:link and a:visited in the CSS definition in order to be effective! a:active MUST come after a:hover in the CSS definition in order to be effective! Pseudo-class names are not case-sensitive. */
/*  
  :active	- a:active - Selects the active link
  :checked - input:checked - Selects every checked <input> element
  :disabled	- input:disabled - Selects every disabled <input> element
  :empty - p:empty - Selects every <p> element that has no children
  :enabled - input:enabled - Selects every enabled <input> element
  :first-child - p:first-child - Selects every <p> elements that is the first child of its parent
  :first-of-type - p:first-of-type - Selects every <p> element that is the first <p> element of its parent
  :focus - input:focus - Selects the <input> element that has focus
  :hover - a:hover - Selects links on mouse over
  :in-range	- input:in-range - Selects <input> elements with a value within a specified range
  :invalid - input:invalid - Selects all <input> elements with an invalid value
  :lang(language)	- p:lang(it) - Selects every <p> element with a lang attribute value starting with "it"
  :last-child	- p:last-child - Selects every <p> elements that is the last child of its parent
  :last-of-type - p:last-of-type - Selects every <p> element that is the last <p> element of its parent
  :link	- a:link - Selects all unvisited links
  :not(selector) - :not(p) - Selects every element that is not a <p> element
  :nth-child(n)	- p:nth-child(2) - Selects every <p> element that is the second child of its parent
  :nth-last-child(n) - p:nth-last-child(2) - Selects every <p> element that is the second child of its parent, counting from the last child
  :nth-last-of-type(n) - p:nth-last-of-type(2) - Selects every <p> element that is the second <p> element of its parent, counting from the last child
  :nth-of-type(n)	- p:nth-of-type(2) - Selects every <p> element that is the second <p> element of its parent
  :only-of-type	- p:only-of-type - Selects every <p> element that is the only <p> element of its parent
  :only-child	- p:only-child - Selects every <p> element that is the only child of its parent
  :optional - input:optional - Selects <input> elements with no "required" attribute
  :out-of-range	- input:out-of-range - Selects <input> elements with a value outside a specified range
  :read-only - input:read-only -	Selects <input> elements with a "readonly" attribute specified
  :read-write	- input:read-write - Selects <input> elements with no "readonly" attribute
  :required	- input:required - Selects <input> elements with a "required" attribute specified
  :root	- root - Selects the document's root element
  :target	- #news:target - Selects the current active #news element (clicked on a URL containing that anchor name)
  :valid - input:valid - Selects all <input> elements with a valid value
  :visited - a:visited	- Selects all visited links
*/

/* CSS Pseudo-elements */
/*  
  selector::pseudo-element {
    property: value;
  }
*/
/* Notice the double colon notation - ::first-line versus :first-line. The double colon replaced the single-colon notation for pseudo-elements in CSS3. This was an attempt from W3C to distinguish between pseudo-classes and pseudo-elements. The single-colon syntax was used for both pseudo-classes and pseudo-elements in CSS2 and CSS1. For backward compatibility, the single-colon syntax is acceptable for CSS2 and CSS1 pseudo-elements. */
/*  
  ::after	- p::after - Insert something after the content of each <p> element
  ::before - p::before - Insert something before the content of each <p> element
  ::first-letter - p::first-letter - Selects the first letter of each <p> element
  ::first-line - p::first-line	- Selects the first line of each <p> element
  ::marker - ::marker - Selects the markers of list items
  ::selection	- p::selection - Selects the portion of an element that is selected by a user
*/

/* CSS Attribute Selectors */
/*  
  [attribute] - [target] - Selects all elements with a target attribute
  [attribute=value]	- [target=_blank] -	Selects all elements with target="_blank"
  [attribute~=value] - [title~=flower] -	Selects all elements with a title attribute containing the word "flower"
  [attribute|=value] - [lang|=en] -	Selects all elements with a lang attribute value starting with "en"
  [attribute^=value] - a[href^="https"] -	Selects every <a> element whose href attribute value begins with "https"
  [attribute$=value] - a[href$=".pdf"] -	Selects every <a> element whose href attribute value ends with ".pdf"
  [attribute*=value] - a[href*="w3schools"] -	Selects every <a> element whose href attribute value contains the substring "w3schools"
*/

/* CSS Forms */
/* Styling Textareas */
/* Tip: Use the resize property to prevent textareas from being resized (disable the "grabber" in the bottom right corner) */
textarea {
  resize: none;
}

/* CSS Counters */
/* Automatic Numbering With Counters */
/*  
  counter-reset - Creates or resets a counter
  counter-increment - Increments a counter value
  content - Inserts generated content
  counter() or counters() function - Adds the value of a counter to an element
*/
body {
  counter-reset: section;
}
h2::before {
  counter-increment: section;
  content: "Section " counter(section) ": ";
}
/* Nesting Counters */
body {
  counter-reset: section;
}
h1 {
  counter-reset: subsection;
}
h1::before {
  counter-increment: section;
  content: "Section " counter(section) ". ";
}
h2::before {
  counter-increment: subsection;
  content: counter(section) "." counter(subsection) " ";
}
/* A counter can also be useful to make outlined lists because a new instance of a counter is automatically created in child elements. */
ol {
  counter-reset: section;
  list-style-type: none;
}
li::before {
  counter-increment: section;
  content: counters(section, ".") " ";
}

/* CSS Units */
/* Note: A whitespace cannot appear between the number and the unit. However, if the value is 0, the unit can be omitted. */
/* Absolute Lengths */
/* * Pixels (px) are relative to the viewing device. For low-dpi devices, 1px is one device pixel (dot) of the display. For printers and high resolution screens 1px implies multiple device pixels. */
/* Relative Lengths */
/* Tip: The em and rem units are practical in creating perfectly scalable layout!
* Viewport = the browser window size. If the viewport is 50cm wide, 1vw = 0.5cm. */

/* CSS Specificity */
/* Specificity Hierarchy */
/*  
  Inline styles - An inline style is attached directly to the element to be styled. Example: <h1 style="color: #ffffff;">.
  IDs - An ID is a unique identifier for the page elements, such as #navbar.
  Classes, attributes and pseudo-classes - This category includes .classes, [attributes] and pseudo-classes such as :hover, :focus etc.
  Elements and pseudo-elements - This category includes element names and pseudo-elements, such as h1, div, :before and :after.
*/
/* How to Calculate Specificity? */
/* Start at 0, add 1000 for style attribute, add 100 for each ID, add 10 for each attribute, class or pseudo-class, add 1 for each element name or pseudo-element. */
/* Specificity Rules */
/*  
  Equal specificity: the latest rule counts - If the same rule is written twice into the external style sheet, then the lower rule in the style sheet is closer to the element to be styled, and therefore will be applied
  ID selectors have a higher specificity than attribute selectors
  Contextual selectors are more specific than a single element selector - The embedded style sheet is closer to the element to be styled
  A class selector beats any number of element selectors
  The universal selector and inherited values have a specificity of 0 - *, body * and similar have a zero specificity. Inherited values also have a specificity of 0
*/

/* CSS The !important Rule */
/* What is !important? */
/* The !important rule in CSS is used to add more importance to a property/value than normal. In fact, if you use the !important rule, it will override ALL previous styling rules for that specific property on that element! */
/* Important About !important */
/* The only way to override an !important rule is to include another !important rule on a declaration with the same (or higher) specificity in the source code */

/* CSS ADVANCED */

/* CSS Rounded Corners */
/* Tip: The border-radius property is actually a shorthand property for the border-top-left-radius, border-top-right-radius, border-bottom-right-radius and border-bottom-left-radius properties. */
/*  
  The border-radius property can have from one to four values. Here are the rules:
  Four values - border-radius: 15px 50px 30px 5px; (first value applies to top-left corner, second value applies to top-right corner, third value applies to bottom-right corner, and fourth value applies to bottom-left corner)
  Three values - border-radius: 15px 50px 30px; (first value applies to top-left corner, second value applies to top-right and bottom-left corners, and third value applies to bottom-right corner)
  Two values - border-radius: 15px 50px; (first value applies to top-left and bottom-right corners, and the second value applies to top-right and bottom-left corners)
  One value - border-radius: 15px; (the value applies to all four corners, which are rounded equally
*/

/* CSS Border Images */
/*  
  The property has three parts:
    The image to use as the border
    Where to slice the image
    Define whether the middle sections should be repeated or stretched
*/
/* Note: For border-image to work, the element also needs the border property set! */
#borderimg {
  border: 10px solid transparent;
  padding: 15px;
  border-image: url(border.png) 30 round;
}
/* Tip: The border-image property is actually a shorthand property for the border-image-source, border-image-slice, border-image-width, border-image-outset and border-image-repeat properties. */
/*  
  border-image	A shorthand property for setting all the border-image-* properties
  border-image-source	Specifies the path to the image to be used as a border
  border-image-slice	Specifies how to slice the border image
  border-image-width	Specifies the widths of the border image
  border-image-outset	Specifies the amount by which the border image area extends beyond the border box
  border-image-repeat	Specifies whether the border image should be repeated, rounded or stretched
*/

/* CSS Multiple Backgrounds */
/* CSS Multiple Backgrounds */
#example1 {
  background-image: url(img_flwr.gif), url(paper.gif);
  background-position: right bottom, left top;
  background-repeat: no-repeat, repeat;
}
#example1 {
  background: url(img_flwr.gif) right bottom no-repeat,
    url(paper.gif) left top repeat;
}
/* CSS Background Size */
/* The size can be specified in lengths, percentages, or by using one of the two keywords: contain or cover. */
/*  
  The contain keyword scales the background image to be as large as possible (but both its width and its height must fit inside the content area). As such, depending on the proportions of the background image and the background positioning area, there may be some areas of the background which are not covered by the background image.
  The cover keyword scales the background image so that the content area is completely covered by the background image (both its width and height are equal to or exceed the content area). As such, some parts of the background image may not be visible in the background positioning area.
*/
/* Define Sizes of Multiple Background Images */
#example1 {
  background: url(img_tree.gif) left top no-repeat,
    url(img_flwr.gif) right bottom no-repeat, url(paper.gif) left top repeat;
  background-size: 50px, 130px, auto;
}
/* Full Size Background Image */
html {
  background: url(img_man.jpg) no-repeat center fixed;
  background-size: cover;
}
/* CSS background-origin Property */
/*  
  border-box - the background image starts from the upper left corner of the border
  padding-box - (default) the background image starts from the upper left corner of the padding edge
  content-box - the background image starts from the upper left corner of the content
*/
/* CSS background-clip Property */
/*  
  border-box - (default) the background is painted to the outside edge of the border
  padding-box - the background is painted to the outside edge of the padding
  content-box - the background is painted within the content box
*/

/* CSS Color Keywords */
/* The transparent keyword is used to make a color transparent. This is often used to make a transparent background color for an element. */
/* The currentcolor keyword is like a variable that holds the current value of the color property of an element. */
/* The inherit keyword specifies that a property should inherit its value from its parent element. */

/* CSS Gradients */
/* CSS Gradients - CSS Gradients */
/* CSS Linear Gradients */
background-image: linear-gradient(direction, color-stop1, color-stop2, ...);
/* Using Angles */
background-image: linear-gradient(angle, color-stop1, color-stop2);
/* Using Multiple Color Stops */
#grad {
  background-image: linear-gradient(red, yellow, green);
}
/* Using Transparency */
#grad {
  background-image: linear-gradient(
    to right,
    rgba(255, 0, 0, 0),
    rgba(255, 0, 0, 1)
  );
}
/* Repeating a linear-gradient */
#grad {
  background-image: repeating-linear-gradient(red, yellow 10%, green 20%);
}

/* CSS Gradients - CSS Radial Gradients */
/* CSS Radial Gradients */
background-image: radial-gradient(
  shape size at position,
  start-color,
  ...,
  last-color
);
/* Radial Gradient - Evenly Spaced Color Stops (this is default) */
#grad {
  background-image: radial-gradient(red, yellow, green);
}
/* Radial Gradient - Differently Spaced Color Stops */
#grad {
  background-image: radial-gradient(red 5%, yellow 15%, green 60%);
}
/* Set Shape */
/* The shape parameter defines the shape. It can take the value circle or ellipse. The default value is ellipse. */
/* Use of Different Size Keywords */
/*  
  closest-side
  farthest-side
  closest-corner
  farthest-corner
*/
/* Repeating a radial-gradient */
#grad {
  background-image: repeating-radial-gradient(red, yellow 10%, green 15%);
}

/* CSS Shadows */
/* CSS Shadows - CSS Shadow Effects */
/* CSS Text Shadow */
h1 {
  text-shadow: 2px 2px 5px red;
}
/* Multiple Shadows */
h1 {
  text-shadow: 0 0 3px #ff0000, 0 0 5px #0000ff;
}
/* Create a plain border around some text (without shadows) */
h1 {
  color: yellow;
  text-shadow: -1px 0 black, 0 1px black, 1px 0 black, 0 -1px black;
}

/* CSS Shadows - CSS Box Shadow */
/* CSS box-shadow Property */
div {
  box-shadow: 10px 10px 5px grey;
}
/* Cards */
div.card {
  width: 250px;
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
  text-align: center;
}

/* CSS Text Effects */
/* CSS Text Overflow */
p.test1 {
  white-space: nowrap;
  width: 200px;
  border: 1px solid #000000;
  overflow: hidden;
  text-overflow: clip;
}
p.test2 {
  white-space: nowrap;
  width: 200px;
  border: 1px solid #000000;
  overflow: hidden;
  text-overflow: ellipsis;
}
/* CSS Word Wrapping */
p {
  word-wrap: break-word;
}
/* CSS Word Breaking */
p.test1 {
  word-break: keep-all;
}
p.test2 {
  word-break: break-all;
}
/* CSS Writing Mode */
p.test1 {
  writing-mode: horizontal-tb;
}
span.test2 {
  writing-mode: vertical-rl;
}
p.test2 {
  writing-mode: vertical-rl;
}
/*  
  text-align-last	Specifies how to align the last line of a text
  text-justify	Specifies how justified text should be aligned and spaced
*/

/* CSS Web Fonts */
@font-face {
  font-family: myFirstFont;
  src: url(sansation_light.woff);
}
div {
  font-family: myFirstFont;
}
/*  
  font-family	- name - Required. Defines a name for the font
  src	- URL -	Required. Defines the URL of the font file
  font-stretch - normal - Optional. Defines how the font should be stretched. Default is "normal"
                condensed
                ultra-condensed
                extra-condensed
                semi-condensed
                expanded
                semi-expanded
                extra-expanded
                ultra-expanded	
  font-style - normal - Optional. Defines how the font should be styled. Default is "normal"
              italic
              oblique	
  font-weight	- normal - Optional. Defines the boldness of the font. Default is "normal"
                bold
                100
                200
                300
                400
                500
                600
                700
                800
                900	
  unicode-range - unicode-range	- Optional. Defines the range of UNICODE characters the font supports. Default is "U+0-10FFFF"
*/

/* CSS 2D Transforms */
/* The matrix() Method */
/* The parameters are as follow: matrix(scaleX(),skewY(),skewX(),scaleY(),translateX(),translateY()) */
/* 
  transform-origin - Allows you to change the position on transformed elements
*/
/*  
  matrix(n,n,n,n,n,n)	- Defines a 2D transformation, using a matrix of six values
  translate(x,y) - Defines a 2D translation, moving the element along the X- and the Y-axis
  translateX(n)	- Defines a 2D translation, moving the element along the X-axis
  translateY(n)	- Defines a 2D translation, moving the element along the Y-axis
  scale(x,y) - Defines a 2D scale transformation, changing the elements width and height
  scaleX(n)	- Defines a 2D scale transformation, changing the element's width
  scaleY(n)	- Defines a 2D scale transformation, changing the element's height
  rotate(angle)	- Defines a 2D rotation, the angle is specified in the parameter
  skew(x-angle,y-angle)	- Defines a 2D skew transformation along the X- and the Y-axis
  skewX(angle) - Defines a 2D skew transformation along the X-axis
  skewY(angle) - Defines a 2D skew transformation along the Y-axis
*/

/* CSS 3D Transforms */
/*  
  transform-style	- Specifies how nested elements are rendered in 3D space
  perspective	- Specifies the perspective on how 3D elements are viewed
  perspective-origin - Specifies the bottom position of 3D elements
  backface-visibility	- Defines whether or not an element should be visible when not facing the screen
*/
/*  
  matrix3d(n,n,n,n,n,n,n,n,n,n,n,n,n,n,n,n)	- Defines a 3D transformation, using a 4x4 matrix of 16 values
  translate3d(x,y,z) - Defines a 3D translation
  translateX(x)	- Defines a 3D translation, using only the value for the X-axis
  translateY(y)	- Defines a 3D translation, using only the value for the Y-axis
  translateZ(z)	- Defines a 3D translation, using only the value for the Z-axis
  scale3d(x,y,z) - Defines a 3D scale transformation
  scaleX(x)	- Defines a 3D scale transformation by giving a value for the X-axis
  scaleY(y)	- Defines a 3D scale transformation by giving a value for the Y-axis
  scaleZ(z)	- Defines a 3D scale transformation by giving a value for the Z-axis
  rotate3d(x,y,z,angle)	- Defines a 3D rotation
  rotateX(angle) - Defines a 3D rotation along the X-axis
  rotateY(angle) - Defines a 3D rotation along the Y-axis
  rotateZ(angle) - Defines a 3D rotation along the Z-axis
  perspective(n) - Defines a perspective view for a 3D transformed element
*/

/* CSS Transitions */
/* Note: If the duration part is not specified, the transition will have no effect, because the default value is 0. */
/* Change Several Property Values */
div {
  transition: width 2s, height 4s;
}
/* Specify the Speed Curve of the Transition */
/*  
  ease - specifies a transition effect with a slow start, then fast, then end slowly (this is default)
  linear - specifies a transition effect with the same speed from start to end
  ease-in - specifies a transition effect with a slow start
  ease-out - specifies a transition effect with a slow end
  ease-in-out - specifies a transition effect with a slow start and end
  cubic-bezier(n,n,n,n) - lets you define your own values in a cubic-bezier function
*/

/* CSS Animations */
/* Delay an Animation */
/* Negative values are also allowed. If using negative values, the animation will start as if it had already been playing for N seconds. */
/* Run Animation in Reverse Direction or Alternate Cycles */
/*  
  normal - The animation is played as normal (forwards). This is default
  reverse - The animation is played in reverse direction (backwards)
  alternate - The animation is played forwards first, then backwards
  alternate-reverse - The animation is played backwards first, then forwards
*/
/* Specify the fill-mode For an Animation */
/*  
  none - Default value. Animation will not apply any styles to the element before or after it is executing
  forwards - The element will retain the style values that is set by the last keyframe (depends on animation-direction and animation-iteration-count)
  backwards - The element will get the style values that is set by the first keyframe (depends on animation-direction), and retain this during the animation-delay period
  both - The animation will follow the rules for both forwards and backwards, extending the animation properties in both directions
*/
/* animation-play-state	- Specifies whether the animation is running or paused */

/* CSS Styling Images */
/* Image Filters */
img {
  filter: grayscale(100%);
}

/* CSS Image Reflection */
/* CSS Image Reflections */
/* The value of the box-reflect property can be: below, above, left, or right. */
img {
  -webkit-box-reflect: below;
}
/* CSS Reflection Offset */
img {
  -webkit-box-reflect: below 20px;
}
/* CSS Reflection With Gradient */
img {
  -webkit-box-reflect: below 0px
    linear-gradient(to bottom, rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.4));
}

/* CSS The object-fit Property */
/* 
  fill - This is default. The image is resized to fill the given dimension. If necessary, the image will be stretched or squished to fit
  contain - The image keeps its aspect ratio, but is resized to fit within the given dimension
  cover - The image keeps its aspect ratio and fills the given dimension. The image will be clipped to fit
  none - The image is not resized
  scale-down - the image is scaled down to the smallest version of none or contain
*/

/* CSS The object-position Property */
/* object-posititon	- Specifies how an <img> or <video> should be positioned with x/y coordinates inside its "own content box" */
img {
  width: 200px;
  height: 300px;
  object-fit: cover;
  object-position: 80% 100%;
}

/* CSS Multiple Columns */
/*  
  column-count - Specifies the number of columns an element should be divided into
  column-fill	- Specifies how to fill columns
  column-gap - Specifies the gap between the columns
  column-rule - A shorthand property for setting all the column-rule-* properties
  column-rule-color	- Specifies the color of the rule between columns
  column-rule-style	- Specifies the style of the rule between columns
  column-rule-width	- Specifies the width of the rule between columns
  column-span	- Specifies how many columns an element should span across
  column-width - Specifies a suggested, optimal width for the columns
  columns	- A shorthand property for setting column-width and column-count
*/

/* CSS User Interface */
/* CSS Resizing */
div {
  resize: horizontal;
  overflow: auto;
}
/* CSS Outline Offset */
/* Note: Outline differs from borders! Unlike border, the outline is drawn outside the element's border, and may overlap other content. Also, the outline is NOT a part of the element's dimensions; the element's total width and height is not affected by the width of the outline. */
div.ex1 {
  margin: 20px;
  border: 1px solid black;
  outline: 4px solid red;
  outline-offset: 15px;
}
div.ex2 {
  margin: 10px;
  border: 1px solid black;
  outline: 5px dashed blue;
  outline-offset: 5px;
}

/* CSS Variables */
/* CSS Variables - The var() Function */
/* CSS variables have access to the DOM, which means that you can create variables with local or global scope, change the variables with JavaScript, and change the variables based on media queries. */
/* Syntax of the var() Function */
var(--name, value)
/*  
  name - Required. The variable name (must start with two dashes)
  value	- Optional. The fallback value (used if the variable is not found)
*/
/* Note: The variable name must begin with two dashes (--) and it is case sensitive! */

/* CSS Variables - CSS Overriding Variables */
/* Overriding Global Variables With Local Variables */
/* Add a New Local Variable */

/* CSS Variables - CSS Change Variables With JavaScript */

/* CSS Variables - CSS Using Variables in Media Queries */
@media screen and (min-width: 450px) {
  .container {
    --fontsize: 50px;
  }
}

/* CSS Box Sizing */
/* box-sizing	- Defines how the width and height of an element are calculated: should they include padding and borders, or not */

/* CSS Media Queries */
/*  
  Media queries can be used to check many things, such as:
    width and height of the viewport
    width and height of the device
    orientation (is the tablet/phone in landscape or portrait mode?)
    resolution
*/
/* Media Query Syntax */
@media not|only mediatype and (expressions) {
  CSS-Code;
}
/* The result of the query is true if the specified media type matches the type of device the document is being displayed on and all expressions in the media query are true. When a media query is true, the corresponding style sheet or style rules are applied, following the normal cascading rules. */
/* Unless you use the not or only operators, the media type is optional and the all type will be implied. */
/*
  You can also have different stylesheets for different media: 
  <link rel="stylesheet" media="mediatype and|not|only (expressions)" href="print.css">
*/
/* CSS3 Media Types */
/*  
  all	- Used for all media type devices
  print	- Used for printers
  screen - Used for computer screens, tablets, smart-phones etc.
  speech - Used for screenreaders that "reads" the page out loud
*/

/* CSS Media Queries - Examples */
/* Orientation: Portrait / Landscape */
/* You can have a set of CSS properties that will only apply when the browser window is wider than its height, a so called "Landscape" orientation */
/* Min Width to Max Width */
/* You can also use the (max-width: ..) and (min-width: ..) values to set a minimum width and a maximum width. */
/* Using an additional value: In the example below, we add an additional media query to our already existing one using a comma (this will behave like an OR operator) */
/* When the width is between 600px and 900px OR above 1100px - change the appearance of <div> */
@media screen and (max-width: 900px) and (min-width: 600px), (min-width: 1100px) {
  div.example {
    font-size: 50px;
    padding: 50px;
    border: 8px solid black;
    background: yellow;
  }
}

/* CSS Flexbox */
/* CSS Flexbox - CSS Flex Container */
/*  
  align-content	- Modifies the behavior of the flex-wrap property. It is similar to align-items, but instead of aligning flex items, it aligns flex lines
  align-items	- Vertically aligns the flex items when the items do not use all available space on the cross-axis
  display	- Specifies the type of box used for an HTML element
  flex-direction - Specifies the direction of the flexible items inside a flex container
  flex-flow - A shorthand property for flex-direction and flex-wrap
  flex-wrap	- Specifies whether the flex items should wrap or not, if there is not enough room for them on one flex line
  justify-content	- Horizontally aligns the flex items when the items do not use all available space on the main-axis
*/

/* CSS Flexbox - CSS Flex Items */
/*  
  align-self - Specifies the alignment for a flex item (overrides the flex container's align-items property)
  flex - A shorthand property for the flex-grow, flex-shrink, and the flex-basis properties
  flex-basis - Specifies the initial length of a flex item
  flex-grow	- Specifies how much a flex item will grow relative to the rest of the flex items inside the same container
  The value must be a number, default value is 0.
  flex-shrink	- Specifies how much a flex item will shrink relative to the rest of the flex items inside the same container
  The value must be a number, default value is 1.
  order	- Specifies the order of the flex items inside the same container
  The order value must be a number, default value is 0.
*/

/* CSS RESPONSIVE */

/* Responsive Web Design - The Viewport */
/* Setting The Viewport */
/* <meta name="viewport" content="width=device-width, initial-scale=1.0"> */
/* Size Content to The Viewport */
/*  
  1. Do NOT use large fixed width elements - For example, if an image is displayed at a width wider than the viewport it can cause the viewport to scroll horizontally. Remember to adjust this content to fit within the width of the viewport.
  2. Do NOT let the content rely on a particular viewport width to render well - Since screen dimensions and width in CSS pixels vary widely between devices, content should not rely on a particular viewport width to render well.
  3. Use CSS media queries to apply different styling for small and large screens - Setting large absolute CSS widths for page elements will cause the element to be too wide for the viewport on a smaller device. Instead, consider using relative width values, such as width: 100%. Also, be careful of using large absolute positioning values. It may cause the element to fall outside the viewport on small devices.
*/

/* Responsive Web Design - Grid-View */

/* Responsive Web Design - Media Queries */
/* Always Design for Mobile First */
/* Mobile First means designing for mobile before designing for desktop or any other device (This will make the page display faster on smaller devices). */
/* Typical Device Breakpoints */
/*  
  /* Extra small devices (phones, 600px and down) */
  @media only screen and (max-width: 600px) {...}

  /* Small devices (portrait tablets and large phones, 600px and up) */
  @media only screen and (min-width: 600px) {...}

  /* Medium devices (landscape tablets, 768px and up) */
  @media only screen and (min-width: 768px) {...}

  /* Large devices (laptops/desktops, 992px and up) */
  @media only screen and (min-width: 992px) {...}

  /* Extra large devices (large laptops and desktops, 1200px and up) */
  @media only screen and (min-width: 1200px) {...}
*/

/* Responsive Web Design - Images */
/* Using The width Property */
img {
  width: 100%;
  height: auto;
}
/* Using The max-width Property */
img {
  max-width: 100%;
  height: auto;
}
/* Background Images */
/*  
  1. If the background-size property is set to "contain", the background image will scale, and try to fit the content area. However, the image will keep its aspect ratio (the proportional relationship between the image's width and height)
  2. If the background-size property is set to "100% 100%", the background image will stretch to cover the entire content area
  3. If the background-size property is set to "cover", the background image will scale to cover the entire content area. Notice that the "cover" value keeps the aspect ratio, and some part of the background image may be clipped
*/
/* Different Images for Different Devices */
/* For width smaller than 400px: */
body {
  background-image: url('img_smallflower.jpg');
}
/* For width 400px and larger: */
@media only screen and (min-width: 400px) {
  body {
    background-image: url('img_flowers.jpg');
  }
}
/* You can use the media query min-device-width, instead of min-width, which checks the device width, instead of the browser width. Then the image will not change when you resize the browser window */
/* For devices 400px and larger: */
@media only screen and (min-device-width: 400px) {
  body {
    background-image: url('img_flowers.jpg');
  }
}
/* The HTML <picture> Element */
/*  
  <picture>
    <source srcset="img_smallflower.jpg" media="(max-width: 400px)">
    <source srcset="img_flowers.jpg">
    <img src="img_flowers.jpg" alt="Flowers">
  </picture>
*/

/* Responsive Web Design - Videos */
/* Using The width Property */
video {
  width: 100%;
  height: auto;
}
/* Using The max-width Property */
video {
  max-width: 100%;
  height: auto;
}

/* CSS GRID */

/* CSS Grid Layout Module */
/*  
  column-gap - Specifies the gap between the columns
  gap	- A shorthand property for the row-gap and the column-gap properties
  grid - A shorthand property for the grid-template-rows, grid-template-columns, grid-template-areas, grid-auto-rows, grid-auto-columns, and the grid-auto-flow properties
  grid-area	- Either specifies a name for the grid item, or this property is a shorthand property for the grid-row-start, grid-column-start, grid-row-end, and grid-column-end properties
  grid-auto-columns -	Specifies a default column size
  grid-auto-flow - Specifies how auto-placed items are inserted in the grid
  grid-auto-rows - Specifies a default row size
  grid-column	- A shorthand property for the grid-column-start and the grid-column-end properties
  grid-column-end -	Specifies where to end the grid item
  grid-column-gap	- Specifies the size of the gap between columns
  grid-column-start -	Specifies where to start the grid item
  grid-gap - A shorthand property for the grid-row-gap and grid-column-gap properties
  grid-row - A shorthand property for the grid-row-start and the grid-row-end properties
  grid-row-end - Specifies where to end the grid item
  grid-row-gap - Specifies the size of the gap between rows
  grid-row-start - Specifies where to start the grid item
  grid-template	- A shorthand property for the grid-template-rows, grid-template-columns and grid-areas properties
  grid-template-areas -	Specifies how to display columns and rows, using named grid items
  grid-template-columns -	Specifies the size of the columns, and how many columns in a grid layout
  grid-template-rows - Specifies the size of the rows in a grid layout
  row-gap -	Specifies the gap between the grid rows
*/

/* CSS Grid Container */
/* The justify-content Property */
/*  
  space-evenly
  space-around
  space-between
  center
  start
  end
*/
/* The align-content Property */
/*  
  center
  space-evenly
  space-around
  space-between
  start
  end
*/

/* CSS Grid Item */
/* The grid-column Property */
/* Note: The grid-column property is a shorthand property for the grid-column-start and the grid-column-end properties. */
.item1 {
  grid-column: 1 / 5;
}
.item1 {
  grid-column: 1 / span 3;
}
/* The grid-row Property */
/* Note: The grid-row property is a shorthand property for the grid-row-start and the grid-row-end properties. */
.item1 {
  grid-row: 1 / 4;
}
.item1 {
  grid-row: 1 / span 2;
}
/* The grid-area Property */
/* The grid-area property can be used as a shorthand property for the grid-row-start, grid-column-start, grid-row-end and the grid-column-end properties. */
.item8 {
  grid-area: 1 / 2 / 5 / 6;
}
.item8 {
  grid-area: 2 / 1 / span 2 / span 3;
}
/* Naming Grid Items */
/* Note: A period sign represents a grid item with no name. */
.item1 {
  grid-area: myArea;
}
.grid-container {
  grid-template-areas: 'myArea myArea . . .';
}
/* The Order of the Items */
.item1 { grid-area: 1 / 3 / 2 / 4; }
.item2 { grid-area: 2 / 3 / 3 / 4; }
.item3 { grid-area: 1 / 1 / 2 / 2; }
.item4 { grid-area: 1 / 2 / 2 / 3; }
.item5 { grid-area: 2 / 1 / 3 / 2; }
.item6 { grid-area: 2 / 2 / 3 / 3; }

/* CSS SASS */

/* CSS SASS - SASS TUTORIAL */

/* Sass Variables */
/*  
  With Sass, you can store information in variables, like:
    strings
    numbers
    colors
    booleans
    lists
    nulls
*/
$variablename: value;
/* Using Sass !global */
/* !global indicates that a variable is global, which means that it is accessible on all levels. */
$myColor: red;
h1 {
  $myColor: green !global;
  color: $myColor;
}
p {
  color: $myColor;
}
/* Tip: Global variables should be defined outside any rules. It could be wise to define all global variables in its own file, named "_globals.scss", and include the file with the @include keyword. */

/* Sass Nested Rules and Properties */
/* Sass Nested Properties */
font: {
  family: Helvetica, sans-serif;
  size: 18px;
  weight: bold;
}
text: {
  align: center;
  transform: lowercase;
  overflow: hidden;
}

/* Sass @import and Partials */
/* Sass Importing Files */
@import filename;
/* Tip: You do not need to specify a file extension, Sass automatically assumes that you mean a .sass or .scss file. You can also import CSS files. The @import directive imports the file and any variables or mixins defined in the imported file can then be used in the main file. */
/* Sass Partials */
/* By default, Sass transpiles all the .scss files directly. However, when you want to import a file, you do not need the file to be transpiled directly. Sass has a mechanism for this: If you start the filename with an underscore, Sass will not transpile it. Files named this way are called partials in Sass. */
_filename;

/* Sass @mixin and @include */
/* Defining a Mixin */
@mixin name {
  property: value;
  property: value;
  ...
}
/* Tip: A tip on hyphens and underscore in Sass: Hyphens and underscores are considered to be the same. This means that @mixin important-text { } and @mixin important_text { } are considered as the same mixin! */
/* Using a Mixin */
selector {
  @include mixin-name;
}
/* A mixin can also include other mixins */
@mixin special-text {
  @include important-text;
  @include link;
  @include special-border;
}
/* Passing Variables to a Mixin */
/* Define mixin with two arguments */
@mixin bordered($color, $width) {
  border: $width solid $color;
}
.myArticle {
  @include bordered(blue, 1px);  // Call mixin with two values
}
.myNotes {
  @include bordered(red, 2px); // Call mixin with two values
}
/* Default Values for a Mixin */
@mixin bordered($color: blue, $width: 1px) {
  border: $width solid $color;
}
/* Then, you only need to specify the values that change when you include the mixin */
.myTips {
  @include bordered($color: orange);
}
/* Using a Mixin For Vendor Prefixes */
@mixin transform($property) {
  -webkit-transform: $property;
  -ms-transform: $property;
  transform: $property;
}
.myBox {
  @include transform(rotate(20deg));
}

/* Sass @extend and Inheritance */
.button-basic  {
  border: none;
  padding: 15px 30px;
  text-align: center;
  font-size: 16px;
  cursor: pointer;
}
.button-report  {
  @extend .button-basic;
  background-color: red;
}
.button-submit  {
  @extend .button-basic;
  background-color: green;
  color: white;
}
/* By using the @extend directive, you do not need to specify several classes for an element in your HTML code, like this: <button class="button-basic button-report">Report this</button>. You just need to specify .button-report to get both sets of styles. */

/* SASS FUNCTIONS */

/* Sass String Functions */
/* Sass strings are 1-based. The first character in a string is at index 1, not 0. */
/*  
  quote(string)	Adds quotes to string, and returns the result.
  Example:
  quote(Hello world!)
  Result: "Hello world!"

  str-index(string, substring)	Returns the index of the first occurrence of the substring within string.
  Example:
  str-index("Hello world!", "H")
  Result: 1

  str-insert(string, insert, index)	Returns string with insert inserted at the specified index position.
  Example:
  str-insert("Hello world!", " wonderful", 6)
  Result: "Hello wonderful world!"

  str-length(string)	Returns the length of string (in characters).
  Example:
  str-length("Hello world!")
  Result: 12

  str-slice(string, start, end)	Extracts characters from string; start at start and end at end, and returns the slice.
  Example:
  str-slice("Hello world!", 2, 5)
  Result: "ello"

  to-lower-case(string)	Returns a copy of string converted to lower case.
  Example:
  to-lower-case("Hello World!")
  Result: "hello world!"

  to-upper-case(string)	Returns a copy of string converted to upper case.
  Example:
  to-upper-case("Hello World!")
  Result: "HELLO WORLD!"

  unique-id()	Returns a unique randomly generated unquoted string (guaranteed to be unique within the current sass session).
  Example:
  unique-id()
  Result: tyghefnsv

  unquote(string)	Removes quotes around string (if any), and returns the result.
  Example:
  unquote("Hello world!")
  Result: Hello world!
*/

/* Sass Numeric Functions */
/*  
  abs(number)	Returns the absolute value of number.
  Example:
  abs(15)
  Result: 15
  abs(-15)
  Result: 15

  ceil(number)	Rounds number up to the nearest integer.
  Example:
  ceil(15.20)
  Result: 16

  comparable(num1, num2)	Returns whether num1 and num2 are comparable.
  Example:
  comparable(15px, 10px)
  Result: true
  comparable(20mm, 1cm)
  Result: true
  comparable(35px, 2em)
  Result: false

  floor(number)	Rounds number down to the nearest integer.
  Example:
  floor(15.80)
  Result: 15

  max(number...)	Returns the highest value of several numbers.
  Example:
  max(5, 7, 9, 0, -3, -7)
  Result: 9

  min(number...)	Returns the lowest value of several numbers.
  Example:
  min(5, 7, 9, 0, -3, -7)
  Result: -7

  percentage(number)	Converts number to a percentage (multiplies the number with 100).
  Example:
  percentage(1.2)
  Result: 120

  random()	Returns a random number between 0 and 1.
  Example:
  random()
  Result: 0.45673

  random(number)	Returns a random integer between 1 and number.
  Example:
  random(6)
  Result: 4

  round(number)	Rounds number to the nearest integer.
  Example:
  round(15.20)
  Result: 15
  round(15.80)
  Result: 16
*/

/* Sass List Functions */
/* 
  Sass lists are immutable (they cannot change). So, the list functions that return a list, will return a new list, and not change the original list. Sass lists are 1-based. The first list item in a list is at index 1, not 0.
*/
/*  
  append(list, value, [separator])	Adds a single value to the end of the list. separator can be auto, comma, or space. auto is default.
  Example:
  append((a b c), d)
  Result: a b c d
  append((a b c), (d), comma)
  Result: a, b, c, d

  index(list, value)	Returns the index position for the value in list.
  Example:
  index(a b c, b)
  Result: 2
  index(a b c, f)
  Result: null

  is-bracketed(list)	Checks whether the list has square brackets.
  Example:
  is-bracketed([a b c])
  Result: true
  is-bracketed(a b c)
  Result: false

  join(list1, list2, [separator, bracketed])	Appends list2 to the end of list1. separator can be auto, comma, or space. auto is default (will use the separator in the first list). bracketed can be auto, true, or false. auto is default.
  Example:
  join(a b c, d e f)
  Result: a b c d e f
  join((a b c), (d e f), comma)
  Result: a, b, c, d, e, f
  join(a b c, d e f, $bracketed: true)
  Result: [a b c d e f]

  length(list)	Returns the length of the list.
  Example:
  length(a b c)
  Result: 3

  list-separator(list)	Returns the list separator used, as a string. Can be either space or comma.
  Example:
  list-separator(a b c)
  Result: "space"
  list-separator(a, b, c)
  Result: "comma"

  nth(list, n)	Returns the nth element in the list.
  Example:
  nth(a b c, 3)
  Result: c

  set-nth(list, n, value)	Sets the nth list element to the value specified.
  Example:
  set-nth(a b c, 2, x)
  Result: a x c

  zip(lists)	Combines lists into a single multidimensional list.
  Example:
  zip(1px 2px 3px, solid dashed dotted, red green blue)
  Result: 1px solid red, 2px dashed green, 3px dotted blue
*/

/* Sass Map Functions */
/* Tip: It is also possible to use the List functions from the previous page, with maps. Then the map will be treated as a list with two elements. */
/* Sass maps are immutable (they cannot change). So, the map functions that return a map, will return a new map, and not change the original map. */
/*  
  map-get(map, key)	Returns the value for the specified key in the map.
  Example:
  $font-sizes: ("small": 12px, "normal": 18px, "large": 24px)
  map-get($font-sizes, "small")
  Result: 12px

  map-has-key(map, key)	Checks whether map has the specified key. Returns true or false.
  Example:
  $font-sizes: ("small": 12px, "normal": 18px, "large": 24px)
  map-has-key($font-sizes, "big")
  Result: false

  map-keys(map)	Returns a list of all keys in map.
  Example:
  $font-sizes: ("small": 12px, "normal": 18px, "large": 24px)
  map-keys($font-sizes)
  Result: "small", "normal, "large"

  map-merge(map1, map2)	Appends map2 to the end of map1.
  Example:
  $font-sizes: ("small": 12px, "normal": 18px, "large": 24px)
  $font-sizes2: ("x-large": 30px, "xx-large": 36px)
  map-merge($font-sizes, $font-sizes2)
  Result: "small": 12px, "normal": 18px, "large": 24px, "x-large": 30px, "xx-large": 36px

  map-remove(map, keys...)	Removes the specified keys from map.
  Example:
  $font-sizes: ("small": 12px, "normal": 18px, "large": 24px)
  map-remove($font-sizes, "small")
  Result: ("normal": 18px, "large": 24px)
  map-remove($font-sizes, "small", "large")
  Result: ("normal": 18px)

  map-values(map)	Returns a list of all values in map.
  Example:
  $font-sizes: ("small": 12px, "normal": 18px, "large": 24px)
  map-values($font-sizes)
  Result: 12px, 18px, 24px
*/

/* Sass Selector Functions */
/*  
  is-superselector(super, sub)	Checks whether the super selector matches all the elements that sub matches.
  Example:
  is-superselector("div", "div.myInput")
  Result: true
  is-superselector("div.myInput", "div")
  Result: false
  is-superselector("div", "div")
  Result: true

  selector-append(selectors)	Appends the second (and third/fourth etc.) selector to the first selector.
  Example:
  selector-append("div", ".myInput")
  Result: div.myInput
  selector-append(".warning", "__a")
  Result: .warning__a

  selector-extend(selector, extendee, extender)	 

  selector-nest(selectors)	Returns a new selector containing a nested list of CSS selectors based on the list provided.
  Example:
  selector-nest("ul", "li")
  Result: ul li
  selector-nest(".warning", "alert", "div")
  Result: .warning div, alert div

  selector-parse(selector)	Returns a list of strings contained in selector using the same format as the parent selector.
  Example:
  selector-parse("h1 .myInput .warning")
  Result: ('h1' '.myInput' '.warning')

  selector-replace(selector, original, replacement)	Returns a new selector with the selectors specified in replacement in place of selectors specified in original.
  Example:
  selector-replace("p.warning", "p", "div")
  Result: div.warning

  selector-unify(selector1, selector2)	Returns a new selector that matches only elements matched by both selector1 and selector2.
  Example:
  selector-unify("myInput", ".disabled")
  Result: myInput.disabled
  selector-unify("p", "h1")
  Result: null

  simple-selectors(selectors)	Returns a list of the individual selectors in selectors.
  Example:
  simple-selectors("div.myInput")
  Result: div, .myInput
  simple-selectors("div.myInput:before")
  Result: div, .myInput, :before
*/

/* Sass Introspection Functions */
/*  
  call(function, arguments...)	Calls a function with arguments, and returns the result.

  content-exists()	Checks whether the current mixin was passed a @content block.

  feature-exists(feature)	Checks whether feature is supported by the current Sass implementation.
  Example:
  feature-exists("at-error");
  Result: true

  function-exists(functionname)	Checks whether the specified function exists.
  Example:
  function-exists("nonsense")
  Result: false

  get-function(functionname, css: false)	Returns the specified function. If css is true, it returns a plain CSS function instead.

  global-variable-exists(variablename)	Checks whether the specified global variable exists.
  Example:
  variable-exists(a)
  Result: true

  inspect(value)	Returns a string representation of value.

  mixin-exists(mixinname)	Checks whether the specified mixin exists.
  Example:
  mixin-exists("important-text")
  Result: true

  type-of(value)	Returns the type of value. Can be number, string, color, list, map, bool, null, function, arglist.
  Example:
  type-of(15px)
  Result: number
  type-of(#ff0000)
  Result: color

  unit(number)	Returns the unit associated with a number.
  Example:
  unit(15px)
  Result: px

  unitless(number)	Checks whether the specified number has a unit associated with it.
  Example:
  unitless(15px)
  Result: false
  unitless(15)
  Result: true

  variable-exists(variablename)	Checks whether the specified variable exists in the current scope.
  Example:
  variable-exists(b)
  Result: true
*/

/* Sass Color Functions */
/* Sass Set Color Functions */
/*  
  rgb(red, green, blue)	Sets a color using the Red-Green-Blue (RGB) model. An RGB color value is specified with: rgb(red, green, blue). Each parameter defines the intensity of that color and can be an integer between 0 and 255, or a percentage value (from 0% to 100%).
  Example:
  rgb(0, 0, 255); // rendered as blue because the blue parameter is set to its highest value (255) and the others are set to 0

  rgba(red, green, blue, alpha)	Sets a color using the Red-Green-Blue-Alpha (RGBA) model. RGBA color values are an extension of RGB color values with an alpha channel - which specifies the opacity of the color. The alpha parameter is a number between 0.0 (fully transparent) and 1.0 (fully opaque).
  Example:
  rgba(0, 0, 255, 0.3); // rendered as blue with opacity

  hsl(hue, saturation, lightness)	Sets a color using the Hue-Saturation-Lightness (HSL) model - and represents a cylindrical-coordinate representation of colors. Hue is a degree on the color wheel (from 0 to 360) - 0 or 360 is red, 120 is green, 240 is blue. Saturation is a percentage value; 0% means a shade of gray and 100% is the full color. Lightness is also a percentage; 0% is black, 100% is white.
  Example:
  hsl(120, 100%, 50%); // green
  hsl(120, 100%, 75%); // light green
  hsl(120, 100%, 25%); // dark green
  hsl(120, 60%, 70%); // pastel green

  hsla(hue, saturation, lightness, alpha)	Sets a color using the Hue-Saturation-Lightness-Alpha (HSLA) model. HSLA color values are an extension of HSL color values with an alpha channel - which specifies the opacity of the color. The alpha parameter is a number between 0.0 (fully transparent) and 1.0 (fully opaque).
  Example:
  hsl(120, 100%, 50%, 0.3); // green with opacity
  hsl(120, 100%, 75%, 0.3); // light green with opacity

  grayscale(color)	Sets a gray color with the same lightness as color.
  Example:
  grayscale(#7fffd4);
  Result: #c6c6c6

  complement(color)	Sets a color that is the complementary color of color.
  Example:
  complement(#7fffd4);
  Result: #ff7faa

  invert(color, weight)	Sets a color that is the inverse or negative color of color. The weight parameter is optional and must be a number between 0% and 100%. Default is 100%.
  Example:
  invert(white);
  Result: black
*/

/* Sass Get Color Functions */
/*  
  red(color)	Returns the red value of color as a number between 0 and 255.
  Example:
  red(#7fffd4);
  Result: 127
  red(red);
  Result: 255

  green(color)	Returns the green value of color as a number between 0 and 255.
  Example:
  green(#7fffd4);
  Result: 255
  green(blue);
  Result: 0

  blue(color)	Returns the blue value of color as a number between 0 and 255.
  Example:
  blue(#7fffd4);
  Result: 212
  blue(blue);
  Result: 255

  hue(color)	Returns the hue of color as a number between 0deg and 255deg.
  Example:
  hue(#7fffd4);
  Result: 160deg

  saturation(color)	Returns the HSL saturation of color as a number between 0% and 100%.
  Example:
  saturation(#7fffd4);
  Result: 100%

  lightness(color)	Returns the HSL lightness of color as a number between 0% and 100%.
  Example:
  lightness(#7fffd4);
  Result: 74.9%

  alpha(color)	Returns the alpha channel of color as a number between 0 and 1.
  Example:
  alpha(#7fffd4);
  Result: 1

  opacity(color)	Returns the alpha channel of color as a number between 0 and 1.
  Example:
  opacity(rgba(127, 255, 212, 0.5));
  Result: 0.5
*/

/* Sass Manipulate Color Functions */
/*  
  mix(color1, color2, weight)	Creates a color that is a mix of color1 and color2. The weight parameter must be between 0% and 100%. A larger weight means that more of color1 should be used. A smaller weight means that more of color2 should be used. Default is 50%.

  adjust-hue(color, degrees)	Adjusts the color's hue with a degree from -360deg to 360deg.
  Example:
  adjust-hue(#7fffd4, 80deg);
  Result: #8080ff

  adjust-color(color, red, green, blue, hue, saturation, lightness, alpha)	Adjusts one or more parameters by the specified amount. This function adds or subtracts the specified amount to/from the existing color value.
  Example:
  adjust-color(#7fffd4, blue: 25);
  Result:

  change-color(color, red, green, blue, hue, saturation, lightness, alpha)	Sets one or more parameters of a color to new values.
  Example:
  change-color(#7fffd4, red: 255);
  Result: #ffffd4

  scale-color(color, red, green, blue,  saturation, lightness, alpha)	Scales one or more parameters of color.

  rgba(color, alpha)	Creates a new color of color with the given alpha channel.
  Example:
  rgba(#7fffd4, 30%);
  Result: rgba(127, 255, 212, 0.3)

  lighten(color, amount)	Creates a lighter color of color with an amount between 0% and 100%. The amount parameter increases the HSL lightness by that percent.

  darken(color, amount)	Creates a darker color of color with an amount between 0% and 100%. The amount parameter decreases the HSL lightness by that percent.

  saturate(color, amount)	Creates a more saturated color of color with an amount between 0% and 100%. The amount parameter increases the HSL saturation by that percent.

  desaturate(color, amount)	Creates a less saturated color of color with an amount between 0% and 100%. The amount parameter decreases the HSL saturation by that percent.

  opacify(color, amount)	Creates a more opaque color of color with an amount between 0 and 1. The amount parameter increases the alpha channel by that amount.

  fade-in(color, amount)	Creates a more opaque color of color with an amount between 0 and 1. The amount parameter increases the alpha channel by that amount.

  transparentize(color, amount)	Creates a more transparent color of color with an amount between 0 and 1. The amount parameter decreases the alpha channel by that amount.
  
  fade-out(color, amount)	Creates a more transparent color of color with an amount between 0 and 1. The amount parameter decreases the alpha channel by that amount.
*/